/**
 * generated by Xtext 2.10.0
 */
package it.unibg.ebnfwb.lang.tests;

import com.google.inject.Inject;
import it.unibg.ebnfwb.lang.ebnfLang.EbnfGrammar;
import it.unibg.ebnfwb.lang.ebnfLang.Line;
import it.unibg.ebnfwb.lang.tests.EbnfLangInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(EbnfLangInjectorProvider.class)
@SuppressWarnings("all")
public class EbnfLangParsingTest {
  @Inject
  private ParseHelper<EbnfGrammar> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("sign = +|-");
      _builder.newLine();
      _builder.append("digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9");
      _builder.newLine();
      _builder.append("integer = [sign]digit{digit}");
      _builder.newLine();
      final EbnfGrammar result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      EList<Line> _lines = result.getLines();
      int _size = _lines.size();
      System.out.println(_size);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelRepetition() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Header  =  {UseDirective}, {ImportDirective},  {ExportDirective}");
      _builder.newLine();
      final EbnfGrammar result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      EList<Line> _lines = result.getLines();
      int _size = _lines.size();
      System.out.println(_size);
      EList<Line> _lines_1 = result.getLines();
      Line _get = _lines_1.get(0);
      InputOutput.<Line>println(_get);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelComment() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("// comment in C");
      _builder.newLine();
      _builder.append("(* ebnf comment *)");
      _builder.newLine();
      _builder.append("Header  =  {UseDirective}, {ImportDirective},  {ExportDirective}");
      _builder.newLine();
      final EbnfGrammar result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      EList<Line> _lines = result.getLines();
      int _size = _lines.size();
      System.out.println(_size);
      EList<Line> _lines_1 = result.getLines();
      Line _get = _lines_1.get(0);
      String _string = _get.toString();
      InputOutput.<String>println(_string);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
